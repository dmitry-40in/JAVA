public class 2 {
    public static void main(String[] args) {
      // Суть классов - когда создаем новый класс мы создаем новый ти
      // Общая механика описания переменной, выглядит как:
      // ТИП_ДАННЫХ имя_переменной
      // То есть у любой переменной есть свой тип данных

      // Описали новый класс - это означает что описали новый тип данных.
      // в добавок к джавовым типам мы написали еще свои.

      // Теперь можем написать переменную типа Point2D и назавем ее, например, a
        Point2D a;
        
    // Что бы присвоить начальное значение (ИНИЦИАЛИЗИРОВАТЬ) переменную:
    // имя_переменной = (это оператор присваивания) значение;
    // Начальное значение для разных типов определяется по-разному:
    // для чилса а = 0, для логического true (или a = 1 == 1 тут сначала будет произведено вычесление 1 == 1, а потом результат положен в переменную)
    // А для ссылочных типов обязаны вызвать конструктор для того чтобы данные разместить как то в памяти
    // (скорее всего в куче)
    //т.е. у ссылочных типов инициализация происходит не явно.
    // Соответсвтенно мы вызываем конструктор. Конструктор это ключевое слово new и дальше ТИП (или ИМЯ ТИПА):
        a = new Point2D();
    // Часто свожится к одной инструкции: ТИП_ДАННЫХ имя_переменной = значение
    // Поэтому часто можем написать:
    // Point a = new Point2D();

    // Если метод создаем не ststic то к нему по названию уже не обратиться
    // Чтобы можно было обратиться мы должны создать экземпляр класса в котором он находиться
    // Не нарушая вышеописанного правила:
    // 1 - создать переменную этого типа (через конструктор)
    // 2 - и уже через переменную этого типа обратиься к соответствующему методу (КЛАСС(онж новый ти) ИМЯ_ПЕРЕМЕННОЙ = new значение (ИМЯ КЛАССА И КРУЩГЛЫЕ СКОБКИ) ИМЯ_ПЕРЕМЕННОЙ.метод)

    // Два типа характеристик есть:
    // 1 - состояния (объявление переменных типа int x; могут быть еще final int a; - типа константы значение который мы один раз присвоем в конструкторе и больще нельзя менять - ЭТО READONLY ПЕРЕМЕННАЯ)
    // 2 - поведения

    // Обращение к полям происходит через оператор точка a.x;

    // Сущестуют можификаторы доступа, которые закрывают доступ к полям за пределами класса (только в поисании класса можно менять)
    // Можно разграничит на чтение и запись внутри класса


        System.out.println(a.getX()); 
    }

    
}

class Point2D {
    int x,y;
    
    public Point2D() {
        this.x = 123;
        this.y = 456;
    }

    int getX() {
        return x;
    }
}

class Foo {
    Point2D[] ps;
    {

    }
}


// Пример сделали тип данных User и логи можно и читать и записывать, а пароль только записывать.

class User {
    private String login, password;

    String getLogin() {
        return login;
    }

    void setPassword(String value) {
        password = value;
    
// В обращении к переменной пишется this.имя_переменной когда имя аргумента метода совпадает с имененм переменной метода
// когда пишем this.password становится понятно, что идем к password в строке 73
// т.е. внутри этого класса где объявляли переменную private String login, password;

    void setPswd(String password) {
        this.password = password;
    }
}

// База данных это всего навсего хранилище. А работать с ней можно только на основе моделей
// Чтобы дернуть данные из бд нужно как то с ними взаимодействовать кодом


